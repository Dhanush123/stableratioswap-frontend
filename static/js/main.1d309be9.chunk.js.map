{"version":3,"sources":["components/NoWalletDetected.jsx","components/NetworkErrorMessage.jsx","components/ConnectWallet.jsx","components/GenericButton.jsx","Utils.js","components/DepositsGrid.jsx","components/App.jsx","index.js"],"names":["NoWalletDetected","className","href","target","rel","NetworkErrorMessage","message","dismiss","role","type","data-dismiss","aria-label","onClick","aria-hidden","ConnectWallet","connectWallet","networkError","GenericButton","props","Box","display","justifyContent","m","Button","variant","color","size","label","Utils","stableRatioSwap","provider","this","rawData","gridData","Object","keys","map","key","i","push","id","coin","depositAmount","console","log","selectedAddress","a","createUser","response","deposit","wait","then","getAllStablecoinDeposits","getLogs","from","topic","interface","events","Deposit","logs","depositValues","undefined","length","ethers","utils","defaultAbiCoder","decode","data","bigNum","toNumber","depositMap","swapStablecoinDeposit","columns","field","headerName","width","ERR_MSG","DepositsGrid","deposits","transformedData","convertRawToGridData","style","autoHeight","rows","autoPageSize","App","initialState","tokenData","transactionError","state","updateDepositState","bind","providers","Web3Provider","window","ethereum","Contract","contractAddress","StableRatioSwap","TokenArtifact","abi","getSigner","setState","userAddress","intializeEthers","enable","checkNetwork","initialize","on","newAddress","resetState","networkVersion","result","position","left","top","transform","Grid","container","direction","justify","alignItems","values","reduce","b","dismissNetworkError","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2jvDAEO,SAASA,IACd,OACE,qBAAKC,UAAU,YAAf,SACE,qBAAKA,UAAU,gCAAf,SACE,qBAAKA,UAAU,wBAAf,SACE,kEACmC,uBADnC,iBAEiB,IACf,mBACEC,KAAK,qBACLC,OAAO,SACPC,IAAI,sBAHN,sBAHF,aCJH,SAASC,EAAT,GAAoD,IAArBC,EAAoB,EAApBA,QAASC,EAAW,EAAXA,QAC7C,OACE,sBAAKN,UAAU,qBAAqBO,KAAK,QAAzC,UACGF,EACD,wBACEG,KAAK,SACLR,UAAU,QACVS,eAAa,QACbC,aAAW,QACXC,QAASL,EALX,SAOE,sBAAMM,cAAY,OAAlB,uBCTD,SAASC,EAAT,GAAkE,IAAzCC,EAAwC,EAAxCA,cAAeC,EAAyB,EAAzBA,aAAcT,EAAW,EAAXA,QAC3D,OACE,qBAAKN,UAAU,YAAf,SACE,sBAAKA,UAAU,gCAAf,UACE,qBAAKA,UAAU,qBAAf,SACGe,GACC,cAACX,EAAD,CACEC,QAASU,EACTT,QAASA,MAIf,sBAAKN,UAAU,wBAAf,UACE,+DACA,wBACEA,UAAU,kBACVQ,KAAK,SACLG,QAASG,EAHX,oC,8BCCKE,EAfO,SAACC,GACrB,OACE,cAACC,EAAA,EAAD,CAAKC,QAAQ,OAAOC,eAAe,gBAAgBC,EAAG,EAAtD,SACE,cAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,UAAUC,KAAK,SAASd,QAASM,EAAMN,QAAzE,SACGM,EAAMS,W,SCkEAC,E,WArEb,WAAYC,EAAiBC,GAAW,oBACtCC,KAAKF,gBAAkBA,EACvBE,KAAKD,SAAWA,E,wDAGlB,SAAqBE,GACnB,IAAIC,EAAW,GAKf,OAJAC,OAAOC,KAAKH,GAASI,KAAI,SAACC,EAAKC,GAC7BL,EAASM,KAAK,CAACC,GAAIF,EAAGG,KAAMJ,EAAKK,cAAeV,EAAQK,QAE1DM,QAAQC,IAAI,WAAWX,GAChBA,I,+DAGT,WAAiBY,GAAjB,eAAAC,EAAA,+EAEyBf,KAAKF,gBAAgBkB,WAAWF,GAFzD,OAEQG,EAFR,OAGIL,QAAQC,IAAI,uBAAwBI,GAHxC,gDAKIL,QAAQC,IAAI,uBAAZ,MALJ,yD,mHASA,WAAcC,GAAd,SAAAC,EAAA,sEAEIH,QAAQC,IAAI,kBAAkBC,EA7Bb,KA2BrB,SAGWd,KAAKF,gBAAgBoB,QAAQJ,EA9BnB,KA2BrB,cAGyEK,OAAOC,MAAK,SAACH,GAChFL,QAAQC,IAAI,oBAAoBI,MAJtC,gDAOIL,QAAQC,IAAI,oBAAZ,MAPJ,yD,oIAWA,WAA+BC,GAA/B,mBAAAC,EAAA,sEACSf,KAAKF,gBAAgBuB,2BAD9B,qBAC0DF,OAAOC,MAAK,SAACH,GACnEL,QAAQC,IAAI,qCAAqCI,MAFrD,SAImBjB,KAAKD,SAASuB,QAAQ,CACrCC,KAAMT,EACNU,MAAOxB,KAAKF,gBAAgB2B,UAAUC,OAAOC,UANjD,cAIMC,EAJN,OAQEhB,QAAQC,IAAI,gCAAgCe,GAExCC,OAA0BC,IAATF,GAAqC,GAAfA,EAAKG,OAAe,CAAC,EAAI,EAAI,EAAI,EAAI,GAChFC,IAAOC,MAAMC,gBAAgBC,OACzB,CAAE,OAAQ,OAAQ,OAAQ,OAAO,QACjCP,EAAK,GAAGQ,MACV/B,KAAI,SAAAgC,GAAM,OAAIA,EAAOC,eACnBC,EAAa,IACP,KAAWV,EAAc,GACnCU,EAAU,KAAWV,EAAc,GACnCU,EAAU,KAAWV,EAAc,GACnCU,EAAU,IAAUV,EAAc,GAClCU,EAAU,KAAWV,EAAc,GACnCjB,QAAQC,IAAI,aAAa0B,GArB3B,kBAsBSA,GAtBT,iD,iIAyBA,4BAAAxB,EAAA,+EAEyBf,KAAKF,gBAAgB0C,wBAF9C,OAEQvB,EAFR,OAGIL,QAAQC,IAAI,kCAAmCI,GAHnD,gDAKML,QAAQC,IAAI,kCAAZ,MALN,yD,6DC5DI4B,EAAU,CACd,CAAEC,MAAO,OAAQC,WAAY,OAAQC,MAAO,KAC5C,CAAEF,MAAO,gBAAiBC,WAAY,qBAAsBC,MAAO,MAG/DC,EAAU,sCAED,SAASC,EAAa3D,GACnC,QAAuB2C,IAAnB3C,EAAM4D,SAAwB,CAChC,IAAIC,EAAkB,IAAInD,OAAMiC,OAAUA,GAAWmB,qBAAqB9D,EAAM4D,UAEhF,OADAnC,QAAQC,IAAI,iCAAiCmC,GAE3CA,EAAgBjB,OAAS,EAErB,qBAAKmB,MAAO,CAAEC,YAAY,EAAMP,MAAO,OAAvC,SACE,cAAC,IAAD,CAAUQ,KAAMJ,EAAiBP,QAASA,EAASU,YAAY,EAAME,cAAc,MAGvF,8BAAMR,IAGZ,OAAO,8BAAMA,ICAf,IA8KeS,E,kDAxKb,WAAYnE,GAAQ,IAAD,8BACjB,cAAMA,IAIDoE,aAAe,CAElBC,eAAW1B,EAEXhB,qBAAiBgB,EACjB2B,sBAAkB3B,EAClB7C,kBAAc6C,EACdG,WAAOH,EACPiB,SAAU,CACR,KAAQ,EACR,KAAQ,EACR,KAAQ,EACR,IAAO,EACP,KAAQ,IAIZ,EAAKW,MAAQ,EAAKH,aAClB,EAAKI,mBAAqB,EAAKA,mBAAmBC,KAAxB,gBAvBT,E,0FA0BnB,sBAAA7C,EAAA,sDAEEf,KAAKD,SAAW,IAAIiC,IAAO6B,UAAUC,aAAaC,OAAOC,UAIzDhE,KAAKF,gBAAkB,IAAIkC,IAAOiC,SAChCC,EAAgBC,gBAChBC,EAAcC,IACdrE,KAAKD,SAASuE,UAAU,IAG1BtE,KAAKuE,SAAS,CAACtC,MAAO,IAAIpC,EAAMG,KAAKF,gBAAiBE,KAAKD,YAZ7D,gD,uFAgBA,WACEC,KAAKuE,SAAS,CAAEtF,kBAAc6C,M,+DAGhC,WAAiB0C,GAAjB,SAAAzD,EAAA,6DAIEf,KAAKuE,SAAS,CACZzD,gBAAiB0D,IALrB,SASQxE,KAAKyE,kBATb,gD,yHAYA,uCAAA1D,EAAA,sEAMkCgD,OAAOC,SAASU,SANlD,sCAMS5D,EANT,KAOEF,QAAQC,IAAI,kBAAkBC,GAIzBd,KAAK2E,eAXZ,iDAeE3E,KAAK4E,WAAW9D,GAGhBiD,OAAOC,SAASa,GAAG,mBAAmB,YAAmB,IAAjBC,EAAgB,oBAKtD,QAAmBhD,IAAfgD,EACF,OAAO,EAAKC,aAGd,EAAKH,WAAWE,MAIlBf,OAAOC,SAASa,GAAG,kBAAkB,WACnC,EAAKE,gBAhCT,iD,8EAqCA,WACE/E,KAAKuE,SAASvE,KAAKuD,gB,0BAIrB,WACE,MA3GuB,UA2GnBQ,OAAOC,SAASgB,gBA1GL,MA0G8CjB,OAAOC,SAASgB,gBAzGhE,OAyGiGjB,OAAOC,SAASgB,iBAI9HhF,KAAKuE,SAAS,CACZtF,aA7GkB,kEAgHb,K,gCAGT,WAAsB,IAAD,OACnBe,KAAK0D,MAAMzB,MAAMZ,2BAA2BD,MAAK,SAAA6D,GAAM,OACrD,EAAKV,SAAS,CAACxB,SAAUkC,IAAS,WAClCrE,QAAQC,IAAI,8BAA8B,EAAK6C,MAAMX,kB,oBAIzD,WAAU,IAAD,OAGP,YAAwBjB,IAApBiC,OAAOC,SACF,cAAC/F,EAAD,IAGJ+B,KAAK0D,MAAM5C,gBAWd,sBACEoC,MAAO,CACHgC,SAAU,WAAYC,KAAM,MAAOC,IAAK,MACxCC,UAAW,wBACXhG,QAAS,gBAJf,UAOA,eAACiG,EAAA,EAAD,CACEC,WAAS,EACTC,UAAU,MACVC,QAAQ,SACRC,WAAW,SAJb,UAME,cAAC,EAAD,CAAe7G,QAAS,kBAAM,EAAK6E,MAAMzB,MAAMjB,WAAW,EAAK0C,MAAM5C,kBAAkBlB,MAAM,qBAC7F,cAAC,EAAD,CAAef,QAAS,kBAAM,EAAK6E,MAAMzB,MAAMf,QAAQ,EAAKwC,MAAM5C,kBAAkBlB,MAAM,sBAC1F,cAAC,EAAD,CAAef,QAAS,kBAAM,EAAK8E,sBAAsB/D,MAAM,qBAC/D,cAAC,EAAD,CAAef,QAAS,kBAAM,EAAK6E,MAAMzB,MAAMO,yBAAyB5C,MAAM,2CAEhF,cAAC0F,EAAA,EAAD,CACEC,WAAS,EACTC,UAAU,MACVC,QAAQ,SACRC,WAAW,SAJb,SAME,cAAC5C,EAAD,CAA+EC,SAAU/C,KAAK0D,MAAMX,UAAjF5C,OAAOwF,OAAO3F,KAAK0D,MAAMX,UAAU6C,QAAO,SAAC7E,EAAG8E,GAAJ,OAAU9E,EAAI8E,WAjC3E,cAAC9G,EAAD,CACEC,cAAe,kBAAM,EAAKA,iBAC1BC,aAAce,KAAK0D,MAAMzE,aACzBT,QAAS,kBAAM,EAAKsH,6B,GApIZC,IAAMC,WC1BxBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.1d309be9.chunk.js","sourcesContent":["import React from \"react\";\n\nexport function NoWalletDetected() {\n  return (\n    <div className=\"container\">\n      <div className=\"row justify-content-md-center\">\n        <div className=\"col-6 p-4 text-center\">\n          <p>\n            No Ethereum wallet was detected. <br />\n            Please install{\" \"}\n            <a\n              href=\"http://metamask.io\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              MetaMask\n            </a>\n            .\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n","/* eslint-disable react/prop-types */\nimport React from \"react\";\n\nexport function NetworkErrorMessage({ message, dismiss }) {\n  return (\n    <div className=\"alert alert-danger\" role=\"alert\">\n      {message}\n      <button\n        type=\"button\"\n        className=\"close\"\n        data-dismiss=\"alert\"\n        aria-label=\"Close\"\n        onClick={dismiss}\n      >\n        <span aria-hidden=\"true\">&times;</span>\n      </button>\n    </div>\n  );\n}\n","/* eslint-disable react/prop-types */\nimport React from \"react\";\n\nimport { NetworkErrorMessage } from \"./NetworkErrorMessage\";\n\nexport function ConnectWallet({ connectWallet, networkError, dismiss }) {\n  return (\n    <div className=\"container\">\n      <div className=\"row justify-content-md-center\">\n        <div className=\"col-12 text-center\">\n          {networkError && (\n            <NetworkErrorMessage \n              message={networkError} \n              dismiss={dismiss} \n            />\n          )}\n        </div>\n        <div className=\"col-6 p-4 text-center\">\n          <p>Please connect to your wallet.</p>\n          <button\n            className=\"btn btn-warning\"\n            type=\"button\"\n            onClick={connectWallet}\n          >\n            Connect Wallet\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport PropTypes from 'prop-types';\nimport Box from '@material-ui/core/Box';\n\nconst GenericButton = (props) => {\n  return (\n    <Box display=\"flex\" justifyContent=\"space-between\" m={1}>\n      <Button variant=\"contained\" color=\"primary\" size=\"medium\" onClick={props.onClick}>\n        {props.label}\n      </Button>\n    </Box>\n  );\n}\n\nGenericButton.propTypes = {\n  onClick: PropTypes.func,\n  label: PropTypes.string\n}\n\nexport default GenericButton;\n","import { ethers } from 'ethers';\n\nconst DEPOSIT_AMOUNT = 100;//ethers.utils.parseEther('0.1');\n\nclass Utils {\n\n  constructor(stableRatioSwap, provider) {\n    this.stableRatioSwap = stableRatioSwap;\n    this.provider = provider;\n  }\n\n  convertRawToGridData(rawData) {\n    let gridData = []\n    Object.keys(rawData).map((key, i) => {\n      gridData.push({id: i, coin: key, depositAmount: rawData[key]})\n    })\n    console.log(\"gridData\",gridData);\n    return gridData;\n  }\n\n  async createUser(selectedAddress) {\n    try {\n      let response = await this.stableRatioSwap.createUser(selectedAddress);\n      console.log(\"createUser response!\", response);    \n    } catch(e) {\n      console.log(\"createUser exception\", e);\n    }\n  }\n\n  async deposit(selectedAddress) {\n    try {\n      console.log(\"deposit address\",selectedAddress,DEPOSIT_AMOUNT);\n      (await this.stableRatioSwap.deposit(selectedAddress,DEPOSIT_AMOUNT)).wait().then((response) => {\n        console.log(\"deposit response!\",response);      \n      });\n    } catch(e) {\n      console.log(\"deposit exception\", e);\n    }\n  }\n\n  async getAllStablecoinDeposits(selectedAddress) {\n    (await this.stableRatioSwap.getAllStablecoinDeposits()).wait().then((response) => {\n      console.log(\"getAllStablecoinDeposits response!\",response);      \n    });\n    let logs = await this.provider.getLogs({\n      from: selectedAddress,\n      topic: this.stableRatioSwap.interface.events.Deposit  \n    });\n    console.log('getAllStablecoinDeposits logs',logs);\n    //TODO: check if 0 or depositValues.length is latest log\n    let depositValues = (logs === undefined || logs.length == 0) ? [0.0,0.0,0.0,0.0,0.0] : \n    ethers.utils.defaultAbiCoder.decode(\n        [ 'uint', 'uint', 'uint', 'uint','uint' ],\n        logs[0].data\n    ).map(bigNum => bigNum.toNumber());\n    let depositMap = {};\n    depositMap['TUSD'] = depositValues[0];\n    depositMap['USDC'] = depositValues[1];\n    depositMap['USDT'] = depositValues[2];\n    depositMap['DAI'] = depositValues[3];\n    depositMap['BUSD'] = depositValues[4];\n    console.log('depositMap',depositMap);\n    return depositMap;\n  }\n\n  async swapStablecoinDeposit() {\n    try {\n      let response = await this.stableRatioSwap.swapStablecoinDeposit();\n      console.log(\"swapStablecoinDeposit response!\", response);    \n    } catch(e) {\n        console.log(\"swapStablecoinDeposit exception\", e);\n    }\n  }\n}\n\nexport default Utils;","import * as React from 'react';\nimport { DataGrid } from '@material-ui/data-grid';\nimport PropTypes from 'prop-types';\nimport Utils from '../Utils';\n\nconst columns = [\n  { field: 'coin', headerName: 'Coin', width: 100 },\n  { field: 'depositAmount', headerName: 'Deposit Amount ($)', width: 250 },\n];\n\nconst ERR_MSG = \"No stablecoin deposits on Aave yet!\";\n\nexport default function DepositsGrid(props) {\n  if (props.deposits !== undefined) {\n    let transformedData = new Utils(undefined,undefined).convertRawToGridData(props.deposits);\n    console.log(\"props.deposits transformedData\",transformedData);\n    return (\n      transformedData.length > 0 ?\n        (\n          <div style={{ autoHeight: true, width: '50%' }}>\n            <DataGrid rows={transformedData} columns={columns} autoHeight={true} autoPageSize={true} />\n          </div>\n        )\n      : <div>{ERR_MSG}</div>\n    );\n  }\n  return <div>{ERR_MSG}</div>;\n}\n\nDepositsGrid.propTypes = {\n  deposits: PropTypes.any\n}\n","import React from 'react';\n\n// We'll use ethers to interact with the Ethereum network and our contract\nimport { ethers } from 'ethers';\n\n// We import the contract's artifacts and address here, as we are going to be\n// using them with ethers\nimport TokenArtifact from \"../contracts/StableRatioSwap.json\";\nimport contractAddress from \"../contracts/contract-address.json\";\n\n// All the logic of this dapp is contained in the Dapp component.\n// These other components are just presentational ones: they don't have any\n// logic. They just render HTML.\nimport { NoWalletDetected } from './NoWalletDetected';\nimport { ConnectWallet } from './ConnectWallet';\n\nimport Grid from '@material-ui/core/Grid';\n\n// import {initializeLendingPool} from '../Aave';\nimport GenericButton from './GenericButton';\nimport DepositsGrid from './DepositsGrid';\nimport Utils from '../Utils';\n\n// This is the Hardhat Network id, you might change it in the hardhat.config.js\n// Here's a list of network ids https://docs.metamask.io/guide/ethereum-provider.html#properties\n// to use when deploying to other networks.\nconst HARDHAT_NETWORK_ID = '31337';\nconst MAINNET_ID = '1';\nconst KOVAN_ID = '42';\nconst NETWORK_ERR_MSG = 'Please connect Metamask to Localhost:8545, mainnet, or Kovan';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // We store multiple things in Dapp's state.\n    // You don't need to follow this pattern, but it's an useful example.\n    this.initialState = {\n      // The info of the token (i.e. It's Name and symbol)\n      tokenData: undefined,\n      // The user's address and balance\n      selectedAddress: undefined,\n      transactionError: undefined,\n      networkError: undefined,\n      utils: undefined,\n      deposits: {\n        'TUSD': 0.0,\n        'USDC': 0.0,\n        'USDT': 0.0,\n        'DAI': 0.0,\n        'BUSD': 0.0\n      }\n    };\n\n    this.state = this.initialState;\n    this.updateDepositState = this.updateDepositState.bind(this);\n  }\n\n  async intializeEthers() {\n    // We first initialize ethers by creating a provider using window.ethereum\n    this.provider = new ethers.providers.Web3Provider(window.ethereum);\n\n    // When, we initialize the contract using that provider and the token's\n    // artifact. You can do this same thing with your contracts.\n    this.stableRatioSwap = new ethers.Contract(\n      contractAddress.StableRatioSwap,\n      TokenArtifact.abi,\n      this.provider.getSigner(0)\n    );\n\n    this.setState({utils: new Utils(this.stableRatioSwap, this.provider)});\n  }\n\n  // This method just clears part of the state.\n  dismissNetworkError() {\n    this.setState({ networkError: undefined });\n  }\n\n  async initialize(userAddress) {\n    // This method initializes the dapp\n\n    // We first store the user's address in the component's state\n    this.setState({\n      selectedAddress: userAddress\n    });\n\n    // Then, we initialize ethers\n    await this.intializeEthers();\n  }\n\n  async connectWallet() {\n    // This method is run when the user clicks the Connect. It connects the\n    // dapp to the user's wallet, and initializes it.\n\n    // To connect to the user's wallet, we have to run this method.\n    // It returns a promise that will resolve to the user's address.\n    const [selectedAddress] = await window.ethereum.enable();\n    console.log('selectedAddress',selectedAddress);\n    // Once we have the address, we can initialize the application.\n\n    // First we check the network\n    if (!this.checkNetwork()) {\n      return;\n    }\n\n    this.initialize(selectedAddress);\n\n    // We reinitialize it whenever the user changes their account.\n    window.ethereum.on('accountsChanged', ([newAddress]) => {\n      // `accountsChanged` event can be triggered with an undefined newAddress.\n      // This happens when the user removes the Dapp from the \"Connected\n      // list of sites allowed access to your addresses\" (Metamask > Settings > Connections)\n      // To avoid errors, we reset the dapp state\n      if (newAddress === undefined) {\n        return this.resetState();\n      }\n\n      this.initialize(newAddress);\n    });\n\n    // We reset the dapp state if the network is changed\n    window.ethereum.on('networkChanged', () => {\n      this.resetState();\n    });\n  }\n\n  // This method resets the state\n  resetState() {\n    this.setState(this.initialState);\n  }\n\n  // This method checks if Metamask selected network is Localhost:8545, mainnet, or Kovan\n  checkNetwork() {\n    if (window.ethereum.networkVersion === HARDHAT_NETWORK_ID || window.ethereum.networkVersion === MAINNET_ID || window.ethereum.networkVersion === KOVAN_ID) {\n      return true;\n    }\n\n    this.setState({\n      networkError: NETWORK_ERR_MSG,\n    });\n\n    return false;\n  }\n\n  updateDepositState() {\n    this.state.utils.getAllStablecoinDeposits().then(result =>\n      this.setState({deposits: result}, () => {\n      console.log(\"deposits updateDepositState\",this.state.deposits)\n    }));\n  }\n\n  render() {\n    // Ethereum wallets inject the window.ethereum object. If it hasn't been\n    // injected, we instruct the user to install MetaMask.\n    if (window.ethereum === undefined) {\n      return <NoWalletDetected />;\n    }\n\n    if (!this.state.selectedAddress) {\n      return (\n        <ConnectWallet\n          connectWallet={() => this.connectWallet()}\n          networkError={this.state.networkError}\n          dismiss={() => this.dismissNetworkError()}\n        />\n      );\n    }\n\n    return (\n      <div\n        style={{\n            position: 'absolute', left: '50%', top: '50%',\n            transform: 'translate(-50%, -50%)',\n            display: 'inline-block'\n        }}\n      >\n      <Grid\n        container\n        direction=\"row\"\n        justify=\"center\"\n        alignItems=\"center\"\n      >\n        <GenericButton onClick={() => this.state.utils.createUser(this.state.selectedAddress)} label=\"Register Account\" />\n        <GenericButton onClick={() => this.state.utils.deposit(this.state.selectedAddress)} label=\"Get 100 TUSD Loan\" />\n        <GenericButton onClick={() => this.updateDepositState()} label=\"Refresh Deposits\" />\n        <GenericButton onClick={() => this.state.utils.swapStablecoinDeposit()} label=\"Swap TUSD -> Highest APY Stablecoin\" />\n      </Grid>\n      <Grid\n        container\n        direction=\"row\"\n        justify=\"center\"\n        alignItems=\"center\"\n      >\n        <DepositsGrid key={Object.values(this.state.deposits).reduce((a, b) => a + b)} deposits={this.state.deposits} /> \n      </Grid>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}