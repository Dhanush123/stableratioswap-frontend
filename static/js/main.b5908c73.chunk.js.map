{"version":3,"sources":["components/NoWalletDetected.jsx","components/NetworkErrorMessage.jsx","components/ConnectWallet.jsx","components/GenericButton.jsx","Utils.js","components/DepositsGrid.jsx","components/BlockchainMessagesTable.jsx","components/App.jsx","index.js"],"names":["NoWalletDetected","className","href","target","rel","NetworkErrorMessage","message","dismiss","role","type","data-dismiss","aria-label","onClick","aria-hidden","ConnectWallet","connectWallet","networkError","GenericButton","props","Box","display","justifyContent","m","Button","variant","color","size","label","Utils","stableRatioSwap","provider","address","this","rawData","gridData","Object","keys","map","key","i","push","id","coin","depositAmount","console","log","a","createUser","wait","then","response","getLogs","fromBlock","from","topic","interface","events","CreateUser","logs","createUserStatus","undefined","length","ethers","utils","defaultAbiCoder","decode","data","deposit","Deposit","depositStatus","getAllStablecoinDeposits","AllDeposits","depositValues","bigNum","toNumber","depositMap","shouldForce","swapStablecoinDeposit","SwapStablecoinDeposit","swapStablecoinDepositStatus","optInToggle","OptInStatus","toggleValue","columns","field","headerName","width","ERR_MSG","DepositsGrid","deposits","transformedData","convertRawToGridData","style","autoHeight","rows","autoPageSize","useStyles","makeStyles","table","minWidth","BlockchainMessagesTable","classes","blockchainMessages","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","TableBody","scope","Math","random","HARDHAT_NETWORK_ID","App","initialState","selectedAddress","transactionError","optInStatus","state","updateDepositState","bind","providers","Web3Provider","window","ethereum","networkVersion","Contract","mockContractAddress","MockStableRatioSwap","MockStableRatioSwapArtifact","abi","getSigner","contractAddress","StableRatioSwap","StableRatioSwapArtifact","setState","userAddress","intializeEthers","enable","checkNetwork","initialize","on","newAddress","resetState","newDeposits","prevState","newOptInStatus","swapStatus","swapName","dismissNetworkError","optInStatusLabel","position","left","top","transform","Grid","container","direction","justify","alignItems","updateCreateUser","updateDeposit","updateSwapStablecoinDeposit","updateOptInToggle","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b5908c73.chunk.js","sourcesContent":["import React from \"react\";\n\nexport function NoWalletDetected() {\n  return (\n    <div className=\"container\">\n      <div className=\"row justify-content-md-center\">\n        <div className=\"col-6 p-4 text-center\">\n          <p>\n            No Ethereum wallet was detected. <br />\n            Please install{\" \"}\n            <a\n              href=\"http://metamask.io\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              MetaMask\n            </a>\n            .\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n","/* eslint-disable react/prop-types */\nimport React from \"react\";\n\nexport function NetworkErrorMessage({ message, dismiss }) {\n  return (\n    <div className=\"alert alert-danger\" role=\"alert\">\n      {message}\n      <button\n        type=\"button\"\n        className=\"close\"\n        data-dismiss=\"alert\"\n        aria-label=\"Close\"\n        onClick={dismiss}\n      >\n        <span aria-hidden=\"true\">&times;</span>\n      </button>\n    </div>\n  );\n}\n","/* eslint-disable react/prop-types */\nimport React from \"react\";\n\nimport { NetworkErrorMessage } from \"./NetworkErrorMessage\";\n\nexport function ConnectWallet({ connectWallet, networkError, dismiss }) {\n  return (\n    <div className=\"container\">\n      <div className=\"row justify-content-md-center\">\n        <div className=\"col-12 text-center\">\n          {networkError && (\n            <NetworkErrorMessage \n              message={networkError} \n              dismiss={dismiss} \n            />\n          )}\n        </div>\n        <div className=\"col-6 p-4 text-center\">\n          <p>Please connect to your wallet.</p>\n          <button\n            className=\"btn btn-warning\"\n            type=\"button\"\n            onClick={connectWallet}\n          >\n            Connect Wallet\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport PropTypes from 'prop-types';\nimport Box from '@material-ui/core/Box';\n\nconst GenericButton = (props) => {\n  return (\n    <Box display=\"flex\" justifyContent=\"space-between\" m={1}>\n      <Button variant=\"contained\" color=\"primary\" size=\"medium\" onClick={props.onClick}>\n        {props.label}\n      </Button>\n    </Box>\n  );\n}\n\nGenericButton.propTypes = {\n  onClick: PropTypes.func,\n  label: PropTypes.string\n}\n\nexport default GenericButton;\n","import { ethers } from 'ethers';\n\nconst DEPOSIT_AMOUNT = 100;//ethers.utils.parseEther('0.1');\n\nclass Utils {\n\n  constructor(stableRatioSwap, provider, address) {\n    this.stableRatioSwap = stableRatioSwap;\n    this.provider = provider;\n    this.address = address;\n  }\n\n  convertRawToGridData(rawData) {\n    let gridData = []\n    Object.keys(rawData).map((key, i) => {\n      gridData.push({id: i, coin: key, depositAmount: rawData[key]['value']/(10**rawData[key]['decimals'])})\n    })\n    console.log(\"gridData\",gridData);\n    return gridData;\n  }\n\n  async createUser() {\n    try {\n      (await this.stableRatioSwap.createUser()).wait().then((response) => {\n        console.log(\"createUser response!\",response);      \n      });\n      let logs = await this.provider.getLogs({\n        fromBlock: 'latest',\n        from: this.address,\n        topic: this.stableRatioSwap.interface.events.CreateUser  \n      });\n      console.log('optInToggle logs',logs);\n      //TODO: check if 0 or depositValues.length is latest log\n      let createUserStatus = (logs === undefined || logs.length == 0) ? false : \n      ethers.utils.defaultAbiCoder.decode(\n          ['bool'],\n          logs[0].data\n      );\n      return createUserStatus;\n    } catch(e) {\n        console.log(\"createUser exception\", e);\n    }\n  }\n\n  async deposit() {\n    try {\n      (await this.stableRatioSwap.deposit(DEPOSIT_AMOUNT,\"TUSD\",this.address)).wait().then((response) => {\n        console.log(\"deposit response!\",response);      \n      });\n      let logs = await this.provider.getLogs({\n        fromBlock: 'latest',\n        from: this.address,\n        topic: this.stableRatioSwap.interface.events.Deposit  \n      });\n      console.log('deposit logs',logs);\n      //TODO: check if 0 or depositValues.length is latest log\n      let depositStatus = (logs === undefined || logs.length == 0) ? false : \n      ethers.utils.defaultAbiCoder.decode(\n          ['bool'],\n          logs[0].data\n      );\n      return depositStatus;\n    } catch(e) {\n        console.log(\"deposit exception\", e);\n    }\n  }\n\n  async getAllStablecoinDeposits() {\n    (await this.stableRatioSwap.getAllStablecoinDeposits()).wait().then((response) => {\n      console.log(\"getAllStablecoinDeposits response!\",response);      \n    });\n    let logs = await this.provider.getLogs({\n      fromBlock: 'latest',\n      from: this.address,\n      topic: this.stableRatioSwap.interface.events.AllDeposits  \n    });\n    console.log('getAllStablecoinDeposits logs',logs);\n    //TODO: check if 0 or depositValues.length is latest log\n    let depositValues = (logs === undefined || logs.length == 0) ? [0,0,0,0,0,0,0,0,0,0] : \n    ethers.utils.defaultAbiCoder.decode(\n        ['uint', 'uint', 'uint', 'uint','uint','uint', 'uint', 'uint', 'uint','uint'],\n        logs[0].data\n    ).map(bigNum => bigNum.toNumber());\n    let depositMap = {};\n\n    depositMap['TUSD'] = {'value':depositValues[0],'decimals':depositValues[1]};\n    depositMap['USDC'] = {'value':depositValues[2],'decimals':depositValues[3]};\n    depositMap['USDT'] = {'value':depositValues[4],'decimals':depositValues[5]};\n    depositMap['DAI'] = {'value':depositValues[6],'decimals':depositValues[7]};\n    depositMap['BUSD'] = {'value':depositValues[8],'decimals':depositValues[9]};\n\n    console.log('depositMap',depositMap);\n    return depositMap;\n  }\n\n  async swapStablecoinDeposit(shouldForce) {\n    try {\n      console.log(\"swapStablecoinDeposit shouldForce:\",shouldForce);\n      (await this.stableRatioSwap.swapStablecoinDeposit(shouldForce)).wait().then((response) => {\n        console.log(\"swapStablecoinDeposit response!\",response);      \n      });\n      let logs = await this.provider.getLogs({\n        fromBlock: 'latest',\n        from: this.address,\n        topic: this.stableRatioSwap.interface.events.SwapStablecoinDeposit  \n      });\n      console.log('swapStablecoinDeposit logs',logs);\n      //TODO: check if 0 or depositValues.length is latest log\n      let swapStablecoinDepositStatus = (logs === undefined || logs.length == 0) ? false : \n      ethers.utils.defaultAbiCoder.decode(\n          ['bool'],\n          logs[0].data\n      );\n      return swapStablecoinDepositStatus;\n    } catch(e) {\n        console.log(\"swapStablecoinDeposit exception\", e);\n    }\n  }\n\n  async optInToggle() {\n    try {\n      (await this.stableRatioSwap.optInToggle()).wait().then((response) => {\n        console.log(\"optInToggle response!\",response);      \n      });\n      let logs = await this.provider.getLogs({\n        fromBlock: 'latest',\n        from: this.address,\n        topic: this.stableRatioSwap.interface.events.OptInStatus  \n      });\n      console.log('optInToggle logs',logs);\n      //TODO: check if 0 or depositValues.length is latest log\n      let toggleValue = (logs === undefined || logs.length == 0) ? false : \n      ethers.utils.defaultAbiCoder.decode(\n          ['bool'],\n          logs[0].data\n      );\n      return toggleValue;\n    } catch(e) {\n        console.log(\"optInToggle exception\", e);\n    }\n  }\n}\n\nexport default Utils;","import * as React from 'react';\nimport { DataGrid } from '@material-ui/data-grid';\nimport PropTypes from 'prop-types';\nimport Utils from '../Utils';\n\nconst columns = [\n  { field: 'coin', headerName: 'Coin', width: 100 },\n  { field: 'depositAmount', headerName: 'Deposit Amount ($)', width: 250 },\n];\n\nconst ERR_MSG = \"No stablecoin deposits on Aave yet!\";\n\nexport default function DepositsGrid(props) {\n  if (props.deposits !== undefined) {\n    let transformedData = new Utils(undefined,undefined).convertRawToGridData(props.deposits);\n    console.log(\"props.deposits transformedData\",transformedData);\n    return (\n      transformedData.length > 0 ?\n        (\n          <div style={{ autoHeight: true, width: '40%' }}>\n            <DataGrid rows={transformedData} columns={columns} autoHeight={true} autoPageSize={true} />\n          </div>\n        )\n      : <div>{ERR_MSG}</div>\n    );\n  }\n  return <div>{ERR_MSG}</div>;\n}\n\nDepositsGrid.propTypes = {\n  deposits: PropTypes.any\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport PropTypes from 'prop-types';\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 200,\n  },\n});\n\nexport default function BlockchainMessagesTable(props) {\n  const classes = useStyles();\n\n  if (props.blockchainMessages !== undefined && props.blockchainMessages.length > 0){\n    return (\n      <TableContainer component={Paper}>\n        <Table className={classes.table} aria-label=\"simple table\">\n          <TableHead>\n            <TableRow>\n              <TableCell>Blockchain Logs</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {props.blockchainMessages.map((message) => (\n              <TableRow key={message+Math.random()}>\n                <TableCell component=\"th\" scope=\"row\">{message}</TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    );\n  }\n  return (<div></div>);\n}\n\nBlockchainMessagesTable.propTypes = {\n  blockchainMessages: PropTypes.array\n}\n","import React from 'react';\n\n// We'll use ethers to interact with the Ethereum network and our contract\nimport { ethers } from 'ethers';\n\n// We import the contract's artifacts and address here, as we are going to be\n// using them with ethers\nimport StableRatioSwapArtifact from \"../contracts/StableRatioSwap.json\";\nimport contractAddress from \"../contracts/contract-address.json\";\n\nimport MockStableRatioSwapArtifact from \"../contracts/MockStableRatioSwap.json\";\nimport mockContractAddress from \"../contracts/mock-contract-address.json\";\n\n// All the logic of this dapp is contained in the Dapp component.\n// These other components are just presentational ones: they don't have any\n// logic. They just render HTML.\nimport { NoWalletDetected } from './NoWalletDetected';\nimport { ConnectWallet } from './ConnectWallet';\n\nimport Grid from '@material-ui/core/Grid';\n\nimport GenericButton from './GenericButton';\nimport DepositsGrid from './DepositsGrid';\nimport Utils from '../Utils';\nimport BlockchainMessagesTable from './BlockchainMessagesTable';\n\n// This is the Hardhat Network id, you might change it in the hardhat.config.js\n// Here's a list of network ids https://docs.metamask.io/guide/ethereum-provider.html#properties\n// to use when deploying to other networks.\nconst HARDHAT_NETWORK_ID = '31337';\nconst MAINNET_ID = '1';\nconst KOVAN_ID = '42';\nconst NETWORK_ERR_MSG = 'Please connect Metamask to Localhost:8545, mainnet, or Kovan';\nconst DEPOSIT_AMOUNT = 100;//ethers.utils.parseEther('0.1');\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.initialState = {\n      selectedAddress: undefined,\n      transactionError: undefined,\n      networkError: undefined,\n      utils: undefined,\n      deposits: {\n        'TUSD': {'value':0,'decimals':2},\n        'USDC': {'value':0,'decimals':2},\n        'USDT': {'value':0,'decimals':2},\n        'DAI': {'value':0,'decimals':2},\n        'BUSD': {'value':0,'decimals':2}\n      },\n      optInStatus: false,\n      blockchainMessages: []\n    };\n\n    this.state = this.initialState;\n    this.updateDepositState = this.updateDepositState.bind(this);\n  }\n\n  async intializeEthers() {\n    // We first initialize ethers by creating a provider using window.ethereum\n    this.provider = new ethers.providers.Web3Provider(window.ethereum);\n\n    if (window.ethereum.networkVersion === HARDHAT_NETWORK_ID) {\n      this.stableRatioSwap = new ethers.Contract(\n        mockContractAddress.MockStableRatioSwap,\n        MockStableRatioSwapArtifact.abi,\n        this.provider.getSigner(0)\n      );\n    }\n    else if (window.ethereum.networkVersion === MAINNET_ID || window.ethereum.networkVersion === KOVAN_ID) {\n      this.stableRatioSwap = new ethers.Contract(\n        contractAddress.StableRatioSwap,\n        StableRatioSwapArtifact.abi,\n        this.provider.getSigner(0)\n      );\n    }\n\n    this.setState({utils: new Utils(this.stableRatioSwap, this.provider, this.state.selectedAddress)});\n  }\n\n  dismissNetworkError() {\n    this.setState({ networkError: undefined });\n  }\n\n  async initialize(userAddress) {\n    // This method initializes the dapp\n\n    // We first store the user's address in the component's state\n    this.setState({\n      selectedAddress: userAddress\n    });\n\n    // Then, we initialize ethers\n    await this.intializeEthers();\n  }\n\n  async connectWallet() {\n    //connects dapp to wallet when user clicks on connect wallet button\n\n    const [selectedAddress] = await window.ethereum.enable();\n    console.log('selectedAddress',selectedAddress);\n    // Once we have the address, we can initialize the application.\n\n    if (!this.checkNetwork()) {\n      return;\n    }\n\n    this.initialize(selectedAddress);\n\n    // We reinitialize it whenever the user changes their account.\n    window.ethereum.on('accountsChanged', ([newAddress]) => {\n      // `accountsChanged` event can be triggered with an undefined newAddress.\n      // This happens when the user removes the Dapp from the \"Connected\n      // list of sites allowed access to your addresses\" (Metamask > Settings > Connections)\n      // To avoid errors, we reset the dapp state\n      if (newAddress === undefined) {\n        return this.resetState();\n      }\n\n      this.initialize(newAddress);\n    });\n\n    // We reset the dapp state if the network is changed\n    window.ethereum.on('networkChanged', () => {\n      this.resetState();\n    });\n  }\n\n  // This method resets the state\n  resetState() {\n    this.setState(this.initialState);\n  }\n\n  // This method checks if Metamask selected network is Localhost:8545, mainnet, or Kovan\n  checkNetwork() {\n    if (window.ethereum.networkVersion === HARDHAT_NETWORK_ID || window.ethereum.networkVersion === MAINNET_ID || window.ethereum.networkVersion === KOVAN_ID) {\n      return true;\n    }\n\n    this.setState({\n      networkError: NETWORK_ERR_MSG,\n    });\n\n    return false;\n  }\n\n  updateDepositState() {\n    this.state.utils.getAllStablecoinDeposits().then(newDeposits =>\n      this.setState({deposits: newDeposits}, () => {\n        console.log(\"deposits updateDepositState\",this.state.deposits)\n        this.setState(prevState => ({\n          blockchainMessages: [...prevState.blockchainMessages, `Successfully fetched new deposit data`]\n        }))\n    }));\n  }\n\n  updateOptInToggle() {\n    this.state.utils.optInToggle().then(newOptInStatus =>\n      this.setState({optInStatus: newOptInStatus}, () => {\n      console.log(\"optInToggle updateOptInToggle\",this.state.optInStatus);\n      this.setState(prevState => ({\n        blockchainMessages: [...prevState.blockchainMessages, `User opt-in status for auto-swapping assets: ${this.state.optInStatus}`]\n      }))\n    }));\n  }\n\n  updateCreateUser() {\n    this.state.utils.createUser().then(createUserStatus => {\n      createUserStatus = createUserStatus === undefined ? \"Error\" : createUserStatus;\n      console.log(\"optInToggle updateOptInToggle\",this.state.optInStatus)\n      this.setState(prevState => ({\n        blockchainMessages: [...prevState.blockchainMessages, `User added to app status: ${createUserStatus}`]\n      }))\n    });\n  }\n\n  updateSwapStablecoinDeposit(shouldForce) {\n    this.state.utils.swapStablecoinDeposit(shouldForce).then(swapStatus => {\n      swapStatus = swapStatus === undefined ? \"Error\" : swapStatus;\n      let swapName =  shouldForce ? \"Force Swap\" : \"Swap\";\n      this.setState(prevState => ({\n        blockchainMessages: [...prevState.blockchainMessages, `${swapName} TUSD deposit status: ${swapStatus}`]\n      }))\n    });\n  }\n\n  updateDeposit() {\n    this.state.utils.deposit().then(depositStatus => {\n      depositStatus = depositStatus === undefined ? \"Error\" : depositStatus;\n      this.setState(prevState => ({\n        blockchainMessages: [...prevState.blockchainMessages, `Send TUSD deposit status: ${depositStatus}`]\n      }))\n    });\n  }\n\n  render() {\n    // Ethereum wallets inject the window.ethereum object. If it hasn't been\n    // injected, we instruct the user to install MetaMask.\n    if (window.ethereum === undefined) {\n      return <NoWalletDetected />;\n    }\n\n    if (!this.state.selectedAddress) {\n      return (\n        <ConnectWallet\n          connectWallet={() => this.connectWallet()}\n          networkError={this.state.networkError}\n          dismiss={() => this.dismissNetworkError()}\n        />\n      );\n    }\n\n    let optInStatusLabel = this.state.optInStatus ? 'Out of' : 'In to';\n\n    return (\n      <div\n        style={{\n            position: 'absolute', left: '50%', top: '50%',\n            transform: 'translate(-50%, -50%)',\n            display: 'inline-block'\n        }}\n      >\n      <Grid\n        container\n        direction=\"row\"\n        justify=\"center\"\n        alignItems=\"center\"\n      >\n        <GenericButton onClick={() => this.updateCreateUser()} label=\"Register Account\" />\n        <GenericButton onClick={() => this.updateDeposit()} label={`Deposit ${DEPOSIT_AMOUNT} TUSD`} />\n        <GenericButton onClick={() => this.updateDepositState()} label=\"Refresh Deposits\" />\n        <GenericButton onClick={() => this.updateSwapStablecoinDeposit(false)} label=\"Swap TUSD\" />\n        <GenericButton onClick={() => this.updateSwapStablecoinDeposit(true)} label=\"Force Swap TUSD\" />\n        <GenericButton onClick={() => this.updateOptInToggle()} label={`Opt ${optInStatusLabel} automatic swapping`} />\n      </Grid>\n      <Grid\n        container\n        direction=\"row\"\n        justify=\"center\"\n        alignItems=\"center\"\n      >\n        <DepositsGrid deposits={this.state.deposits} /> \n      </Grid>\n      <Grid\n        container\n        direction=\"row\"\n        justify=\"center\"\n        alignItems=\"center\"\n      >\n        <BlockchainMessagesTable blockchainMessages={this.state.blockchainMessages} /> \n      </Grid>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}