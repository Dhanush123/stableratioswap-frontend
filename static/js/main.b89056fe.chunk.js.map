{"version":3,"sources":["components/NoWalletDetected.jsx","components/NetworkErrorMessage.jsx","components/ConnectWallet.jsx","components/GenericButton.jsx","Utils.js","components/DepositsGrid.jsx","components/BlockchainMessagesTable.jsx","components/App.jsx","index.js"],"names":["NoWalletDetected","className","href","target","rel","NetworkErrorMessage","message","dismiss","role","type","data-dismiss","aria-label","onClick","aria-hidden","ConnectWallet","connectWallet","networkError","GenericButton","props","Box","display","justifyContent","m","Button","variant","color","size","label","Utils","stableRatioSwap","provider","address","this","rawData","gridData","Object","keys","map","key","i","push","id","coin","depositAmount","console","log","a","createUser","tx","wait","txwait","queryFilter","filters","CreateUser","filterValues","createUserStatus","undefined","length","ethers","utils","defaultAbiCoder","decode","data","getAllStablecoinDeposits","events","AllDeposits","depositValues","depositMap","div","BigNumber","from","pow","toString","shouldForce","swapStablecoinDeposit","SwapStablecoinDeposit","swapStablecoinDepositStatusAndRatio","optInToggle","OptInToggle","toggleValue","columns","field","headerName","width","ERR_MSG","DepositsGrid","deposits","transformedData","convertRawToGridData","style","autoHeight","rows","autoPageSize","useStyles","makeStyles","table","minWidth","BlockchainMessagesTable","classes","blockchainMessages","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","TableBody","scope","Math","random","HARDHAT_NETWORK_ID","App","initialState","selectedAddress","transactionError","optInStatus","state","providers","Web3Provider","window","ethereum","networkVersion","Contract","mockContractAddress","MockStableRatioSwap","MockStableRatioSwapArtifact","abi","getSigner","contractAddress","StableRatioSwap","StableRatioSwapArtifact","setState","userAddress","intializeEthers","enable","checkNetwork","initialize","on","newAddress","resetState","newDeposits","constructor","prevState","newOptInStatus","swapStatusAndRatio","swapStatus","assetReserveRatio","swapName","dismissNetworkError","optInStatusLabel","position","left","top","transform","Grid","container","direction","justify","alignItems","updateCreateUser","updateDepositState","updateSwapStablecoinDeposit","updateOptInToggle","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b89056fe.chunk.js","sourcesContent":["import React from \"react\";\n\nexport function NoWalletDetected() {\n  return (\n    <div className=\"container\">\n      <div className=\"row justify-content-md-center\">\n        <div className=\"col-6 p-4 text-center\">\n          <p>\n            No Ethereum wallet was detected. <br />\n            Please install{\" \"}\n            <a\n              href=\"http://metamask.io\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              MetaMask\n            </a>\n            .\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n","/* eslint-disable react/prop-types */\nimport React from \"react\";\n\nexport function NetworkErrorMessage({ message, dismiss }) {\n  return (\n    <div className=\"alert alert-danger\" role=\"alert\">\n      {message}\n      <button\n        type=\"button\"\n        className=\"close\"\n        data-dismiss=\"alert\"\n        aria-label=\"Close\"\n        onClick={dismiss}\n      >\n        <span aria-hidden=\"true\">&times;</span>\n      </button>\n    </div>\n  );\n}\n","/* eslint-disable react/prop-types */\nimport React from \"react\";\n\nimport { NetworkErrorMessage } from \"./NetworkErrorMessage\";\n\nexport function ConnectWallet({ connectWallet, networkError, dismiss }) {\n  return (\n    <div className=\"container\">\n      <div className=\"row justify-content-md-center\">\n        <div className=\"col-12 text-center\">\n          {networkError && (\n            <NetworkErrorMessage \n              message={networkError} \n              dismiss={dismiss} \n            />\n          )}\n        </div>\n        <div className=\"col-6 p-4 text-center\">\n          <p>Please connect to your wallet.</p>\n          <button\n            className=\"btn btn-warning\"\n            type=\"button\"\n            onClick={connectWallet}\n          >\n            Connect Wallet\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport PropTypes from 'prop-types';\nimport Box from '@material-ui/core/Box';\n\nconst GenericButton = (props) => {\n  return (\n    <Box display=\"flex\" justifyContent=\"space-between\" m={1}>\n      <Button variant=\"contained\" color=\"primary\" size=\"medium\" onClick={props.onClick}>\n        {props.label}\n      </Button>\n    </Box>\n  );\n}\n\nGenericButton.propTypes = {\n  onClick: PropTypes.func,\n  label: PropTypes.string\n}\n\nexport default GenericButton;\n","import { ethers } from 'ethers';\n\n// const DEPOSIT_AMOUNT = 100;//ethers.utils.parseEther('0.1');\n\nclass Utils {\n\n  constructor(stableRatioSwap, provider, address) {\n    this.stableRatioSwap = stableRatioSwap;\n    this.provider = provider;\n    this.address = address;\n  }\n\n  convertRawToGridData(rawData) {\n    let gridData = []\n    Object.keys(rawData).map((key, i) => {\n      gridData.push({id: i, coin: key, depositAmount: rawData[key]})\n    })\n    console.log(\"gridData\",gridData);\n    return gridData;\n  }\n\n  async createUser() {\n    try {\n      let tx = await this.stableRatioSwap.createUser();\n      let txwait = await tx.wait();\n      console.log(\"createUser response!\", txwait);   \n\n      let filterValues = await this.stableRatioSwap.queryFilter(this.stableRatioSwap.filters.CreateUser());\n      let createUserStatus = (filterValues === undefined || filterValues.length == 0) ? false :\n        ethers.utils.defaultAbiCoder.decode(['bool'], filterValues[filterValues.length - 1].data);\n      console.log(\"createUserStatus from chain\",createUserStatus);\n      return createUserStatus;   \n    } catch(e) {\n      console.log(\"createUser exception\", e);\n      return \"Error\";\n    }\n  }\n\n  // async deposit() {\n  //   try {\n  //     let tx = await this.stableRatioSwap.deposit(DEPOSIT_AMOUNT,\"TUSD\",this.address);\n  //     let txwait = await tx.wait();\n  //     console.log(\"deposit response!\",txwait);\n  //     let filterValues = await this.stableRatioSwap.queryFilter(this.stableRatioSwap.filters.Deposit());\n  //     let depositStatus = (filterValues === undefined || filterValues.length == 0) ? false :\n  //       ethers.utils.defaultAbiCoder.decode(['bool'], filterValues[filterValues.length - 1].data);\n  //     console.log(\"depositStatus from chain\",depositStatus);\n  //     return depositStatus;      \n  //   } catch(e) {\n  //     console.log(\"deposit exception\", e);\n  //     return \"Error\";\n  //   }\n  // }\n\n  async getAllStablecoinDeposits() {\n    try {\n      let tx = await this.stableRatioSwap.getAllStablecoinDeposits();\n      let txwait = await tx.wait();\n      console.log(\"getAllStablecoinDeposits response!\",txwait); \n      console.log(\"getAllStablecoinDeposits events\",txwait.events);  \n      let filterValues = await this.stableRatioSwap.queryFilter(this.stableRatioSwap.filters.AllDeposits());\n      console.log(\"filterValues\",filterValues);\n      let depositValues = ethers.utils.defaultAbiCoder.decode(\n        ['uint', 'uint', 'uint', 'uint','uint','uint', 'uint', 'uint', 'uint','uint'],\n        filterValues[filterValues.length - 1].data);\n      console.log(\"depositValues\",depositValues);\n      let depositMap = {};\n\n      depositMap['TUSD'] = depositValues[0].div(ethers.BigNumber.from(\"10\").pow(depositValues[1])).toString();\n      depositMap['USDC'] = depositValues[2].div(ethers.BigNumber.from(\"10\").pow(depositValues[3])).toString();\n      depositMap['USDT'] = depositValues[4].div(ethers.BigNumber.from(\"10\").pow(depositValues[5])).toString();\n      depositMap['DAI'] = depositValues[6].div(ethers.BigNumber.from(\"10\").pow(depositValues[7])).toString();\n      depositMap['BUSD'] = depositValues[8].div(ethers.BigNumber.from(\"10\").pow(depositValues[9])).toString();\n\n      console.log('depositMap',depositMap);\n      return depositMap;   \n    } catch(e) {\n      console.log(\"getAllStablecoinDeposits exception\", e);\n      return {};\n    }\n  }\n\n  async swapStablecoinDeposit(shouldForce) {\n    try {\n      console.log(\"swapStablecoinDeposit shouldForce:\",shouldForce);\n      let tx = await this.stableRatioSwap.swapStablecoinDeposit(shouldForce);\n      let txwait = await tx.wait();\n      console.log(\"swapStablecoinDeposit response!\",txwait); \n      \n      let filterValues = await this.stableRatioSwap.queryFilter(this.stableRatioSwap.filters.SwapStablecoinDeposit());\n      console.log(\"filterValues\",filterValues);\n      console.log(\"filterValues[filterValues.length - 1].data\",filterValues[filterValues.length - 1].data);\n      let swapStablecoinDepositStatusAndRatio = ethers.utils.defaultAbiCoder.decode(['bool, uint'], filterValues[filterValues.length - 1].data);\n      console.log(\"swapStablecoinDepositStatusAndRatio\",swapStablecoinDepositStatusAndRatio);\n      return {\"status\":swapStablecoinDepositStatusAndRatio[0],\n              \"ratio\":swapStablecoinDepositStatusAndRatio[1]/10**4};     \n    } catch(e) {\n        console.log(\"swapStablecoinDeposit exception\", e);\n        return {\"status\": \"Error\", \"ratio\": \"Error\"};  \n    }\n  }\n\n  async optInToggle() {\n    try {\n      let tx = await this.stableRatioSwap.optInToggle();\n      let txwait = await tx.wait();\n      console.log(\"optInToggle response!\",txwait);      \n      let filterValues = await this.stableRatioSwap.queryFilter(this.stableRatioSwap.filters.OptInToggle());\n      console.log(\"filterValues\",filterValues);\n      console.log(\"filterValues[filterValues.length - 1].data\",filterValues[filterValues.length - 1].data);\n      let toggleValue = ethers.utils.defaultAbiCoder.decode(['bool, uint'], filterValues[filterValues.length - 1].data);\n      console.log(\"toggleValue\",toggleValue);\n      return toggleValue;\n    } catch(e) {\n        console.log(\"optInToggle exception\", e);\n    }\n  }\n}\n\nexport default Utils;","import * as React from 'react';\nimport { DataGrid } from '@material-ui/data-grid';\nimport PropTypes from 'prop-types';\nimport Utils from '../Utils';\n\nconst columns = [\n  { field: 'coin', headerName: 'Coin', width: 100 },\n  { field: 'depositAmount', headerName: 'Deposit Amount ($)', width: 250 },\n];\n\nconst ERR_MSG = \"No stablecoin deposits on Aave yet!\";\n\nexport default function DepositsGrid(props) {\n  if (props.deposits !== undefined) {\n    let transformedData = new Utils(undefined,undefined).convertRawToGridData(props.deposits);\n    console.log(\"props.deposits transformedData\",transformedData);\n    return (\n      transformedData.length > 0 ?\n        (\n          <div style={{ autoHeight: true, width: '40%' }}>\n            <DataGrid rows={transformedData} columns={columns} autoHeight={true} autoPageSize={true} />\n          </div>\n        )\n      : <div>{ERR_MSG}</div>\n    );\n  }\n  return <div>{ERR_MSG}</div>;\n}\n\nDepositsGrid.propTypes = {\n  deposits: PropTypes.any\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport PropTypes from 'prop-types';\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 200,\n  },\n});\n\nexport default function BlockchainMessagesTable(props) {\n  const classes = useStyles();\n\n  if (props.blockchainMessages !== undefined && props.blockchainMessages.length > 0){\n    return (\n      <TableContainer component={Paper}>\n        <Table className={classes.table} aria-label=\"simple table\">\n          <TableHead>\n            <TableRow>\n              <TableCell>Blockchain Logs</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {props.blockchainMessages.map((message) => (\n              <TableRow key={message+Math.random()}>\n                <TableCell component=\"th\" scope=\"row\">{message}</TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    );\n  }\n  return (<div></div>);\n}\n\nBlockchainMessagesTable.propTypes = {\n  blockchainMessages: PropTypes.array\n}\n","import React from 'react';\n\n// We'll use ethers to interact with the Ethereum network and our contract\nimport { ethers } from 'ethers';\n\n// We import the contract's artifacts and address here, as we are going to be\n// using them with ethers\nimport StableRatioSwapArtifact from \"../contracts/StableRatioSwap.json\";\nimport contractAddress from \"../contracts/contract-address.json\";\n\nimport MockStableRatioSwapArtifact from \"../contracts/MockStableRatioSwap.json\";\nimport mockContractAddress from \"../contracts/mock-contract-address.json\";\n\n// All the logic of this dapp is contained in the Dapp component.\n// These other components are just presentational ones: they don't have any\n// logic. They just render HTML.\nimport { NoWalletDetected } from './NoWalletDetected';\nimport { ConnectWallet } from './ConnectWallet';\n\nimport Grid from '@material-ui/core/Grid';\n\nimport GenericButton from './GenericButton';\nimport DepositsGrid from './DepositsGrid';\nimport Utils from '../Utils';\nimport BlockchainMessagesTable from './BlockchainMessagesTable';\n\n// This is the Hardhat Network id, you might change it in the hardhat.config.js\n// Here's a list of network ids https://docs.metamask.io/guide/ethereum-provider.html#properties\n// to use when deploying to other networks.\nconst HARDHAT_NETWORK_ID = '31337';\nconst MAINNET_ID = '1';\nconst KOVAN_ID = '42';\nconst NETWORK_ERR_MSG = 'Please connect Metamask to Localhost:8545, mainnet, or Kovan';\n// const DEPOSIT_AMOUNT = 100;//ethers.utils.parseEther('0.1');\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.initialState = {\n      selectedAddress: undefined,\n      transactionError: undefined,\n      networkError: undefined,\n      utils: undefined,\n      deposits: {\n        'TUSD': 0,\n        'USDC': 0,\n        'USDT': 0,\n        'DAI': 0,\n        'BUSD': 0\n      },\n      optInStatus: false,\n      blockchainMessages: []\n    };\n\n    this.state = this.initialState;\n  }\n\n  async intializeEthers() {\n    // We first initialize ethers by creating a provider using window.ethereum\n    this.provider = new ethers.providers.Web3Provider(window.ethereum);\n\n    if (window.ethereum.networkVersion === HARDHAT_NETWORK_ID) {\n      this.stableRatioSwap = new ethers.Contract(\n        mockContractAddress.MockStableRatioSwap,\n        MockStableRatioSwapArtifact.abi,\n        this.provider.getSigner(0)\n      );\n    }\n    else if (window.ethereum.networkVersion === MAINNET_ID || window.ethereum.networkVersion === KOVAN_ID) {\n      this.stableRatioSwap = new ethers.Contract(\n        contractAddress.StableRatioSwap,\n        StableRatioSwapArtifact.abi,\n        this.provider.getSigner(0)\n      );\n    }\n    console.log(\"networkVersion\",window.ethereum.networkVersion);\n    this.setState({utils: new Utils(this.stableRatioSwap, this.provider, this.state.selectedAddress)});\n  }\n\n  dismissNetworkError() {\n    this.setState({ networkError: undefined });\n  }\n\n  async initialize(userAddress) {\n    // This method initializes the dapp\n\n    // We first store the user's address in the component's state\n    this.setState({\n      selectedAddress: userAddress\n    });\n\n    // Then, we initialize ethers\n    await this.intializeEthers();\n  }\n\n  async connectWallet() {\n    //connects dapp to wallet when user clicks on connect wallet button\n\n    const [selectedAddress] = await window.ethereum.enable();\n    console.log('selectedAddress',selectedAddress);\n    // Once we have the address, we can initialize the application.\n\n    if (!this.checkNetwork()) {\n      return;\n    }\n\n    this.initialize(selectedAddress);\n\n    // We reinitialize it whenever the user changes their account.\n    window.ethereum.on('accountsChanged', ([newAddress]) => {\n      // `accountsChanged` event can be triggered with an undefined newAddress.\n      // This happens when the user removes the Dapp from the \"Connected\n      // list of sites allowed access to your addresses\" (Metamask > Settings > Connections)\n      // To avoid errors, we reset the dapp state\n      if (newAddress === undefined) {\n        return this.resetState();\n      }\n\n      this.initialize(newAddress);\n    });\n\n    // We reset the dapp state if the network is changed\n    window.ethereum.on('networkChanged', () => {\n      this.resetState();\n    });\n  }\n\n  // This method resets the state\n  resetState() {\n    this.setState(this.initialState);\n  }\n\n  // This method checks if Metamask selected network is Localhost:8545, mainnet, or Kovan\n  checkNetwork() {\n    if (window.ethereum.networkVersion === HARDHAT_NETWORK_ID || window.ethereum.networkVersion === MAINNET_ID || window.ethereum.networkVersion === KOVAN_ID) {\n      return true;\n    }\n\n    this.setState({\n      networkError: NETWORK_ERR_MSG,\n    });\n\n    return false;\n  }\n\n  async updateDepositState() {\n    let newDeposits = await this.state.utils.getAllStablecoinDeposits();\n    if (newDeposits && Object.keys(newDeposits).length === 0 && newDeposits.constructor === Object) {\n      this.setState(prevState => ({\n        blockchainMessages: [...prevState.blockchainMessages, `Failed to fetch latest deposit data`]\n      }));\n    } else {\n      this.setState({deposits: newDeposits}, () => {\n        console.log(\"deposits updateDepositState\",this.state.deposits)\n        this.setState(prevState => ({\n          blockchainMessages: [...prevState.blockchainMessages, `Successfully fetched latest deposit data`]\n        }));\n      });\n    }\n  }\n\n  async updateOptInToggle() {\n    let newOptInStatus = await this.state.utils.optInToggle();\n    this.setState({optInStatus: newOptInStatus}, () => {\n      console.log(\"optInToggle updateOptInToggle\",this.state.optInStatus);\n      this.setState(prevState => ({\n        blockchainMessages: [...prevState.blockchainMessages, `User opt-in status for auto-swapping assets: ${this.state.optInStatus}`]\n      }))\n    });\n  }\n\n  async updateCreateUser() {\n    let createUserStatus = await this.state.utils.createUser();\n    console.log(\"createUser updateOptInToggle\",this.state.createUserStatus);\n    this.setState(prevState => ({\n      blockchainMessages: [...prevState.blockchainMessages, `User added to app status: ${createUserStatus}`]\n    }));\n  }\n\n  async updateSwapStablecoinDeposit(shouldForce) {\n    let swapStatusAndRatio = await this.state.utils.swapStablecoinDeposit(shouldForce);\n    let swapStatus = swapStatusAndRatio[\"status\"];\n    let assetReserveRatio = swapStatusAndRatio[\"ratio\"];\n    swapStatus = swapStatus === undefined ? \"Error\" : swapStatus;\n    let swapName =  shouldForce ? \"Force Swap\" : \"Swap\";\n    this.setState(prevState => ({\n      blockchainMessages: [...prevState.blockchainMessages, `${swapName} TUSD deposit status: ${swapStatus}, TUSD asset/reserve ratio: ${assetReserveRatio}`]\n    }));\n  }\n\n  // async updateDeposit() {\n  //   let depositStatus = await this.state.utils.deposit();\n  //   this.setState(prevState => ({\n  //     blockchainMessages: [...prevState.blockchainMessages, `Send TUSD deposit status: ${depositStatus}`]\n  //   }));\n  // }\n\n  render() {\n    // Ethereum wallets inject the window.ethereum object. If it hasn't been\n    // injected, we instruct the user to install MetaMask.\n    if (window.ethereum === undefined) {\n      return <NoWalletDetected />;\n    }\n\n    if (!this.state.selectedAddress) {\n      return (\n        <ConnectWallet\n          connectWallet={() => this.connectWallet()}\n          networkError={this.state.networkError}\n          dismiss={() => this.dismissNetworkError()}\n        />\n      );\n    }\n\n    let optInStatusLabel = this.state.optInStatus ? 'Out of' : 'In to';\n\n    return (\n      <div\n        style={{\n            position: 'absolute', left: '50%', top: '50%',\n            transform: 'translate(-50%, -50%)',\n            display: 'inline-block'\n        }}\n      >\n      <Grid\n        container\n        direction=\"row\"\n        justify=\"center\"\n        alignItems=\"center\"\n      >\n        <GenericButton onClick={() => this.updateCreateUser()} label=\"Register Account\" />\n        {/* <GenericButton onClick={() => this.updateDeposit()} label={`Deposit ${DEPOSIT_AMOUNT} TUSD`} /> */}\n        <GenericButton onClick={() => this.updateDepositState()} label=\"Refresh Deposits\" />\n        <GenericButton onClick={() => this.updateSwapStablecoinDeposit(false)} label=\"Swap TUSD\" />\n        <GenericButton onClick={() => this.updateSwapStablecoinDeposit(true)} label=\"Force Swap TUSD\" />\n        <GenericButton onClick={() => this.updateOptInToggle()} label={`Opt ${optInStatusLabel} automatic swapping`} />\n      </Grid>\n      <Grid\n        container\n        direction=\"row\"\n        justify=\"center\"\n        alignItems=\"center\"\n      >\n        <DepositsGrid deposits={this.state.deposits} /> \n      </Grid>\n      <Grid\n        container\n        direction=\"row\"\n        justify=\"center\"\n        alignItems=\"center\"\n      >\n        <BlockchainMessagesTable blockchainMessages={this.state.blockchainMessages} /> \n      </Grid>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}