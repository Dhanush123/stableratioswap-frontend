{"version":3,"sources":["components/NoWalletDetected.jsx","components/NetworkErrorMessage.jsx","components/ConnectWallet.jsx","components/GenericButton.jsx","components/DepositsGrid.jsx","Utils.js","components/BlockchainMessagesTable.jsx","components/App.jsx","index.js"],"names":["NoWalletDetected","className","href","target","rel","NetworkErrorMessage","message","dismiss","role","type","data-dismiss","aria-label","onClick","aria-hidden","ConnectWallet","connectWallet","networkError","GenericButton","props","Box","display","justifyContent","m","Button","variant","color","size","label","columns","field","headerName","width","ERR_MSG","DepositsGrid","undefined","deposits","transformedData","rawData","gridData","Object","keys","map","key","i","push","id","coin","depositAmount","console","log","convertRawToGridData","length","style","autoHeight","rows","autoPageSize","require","config","Utils","stableRatioSwap","provider","address","this","httpProvider","Web3","providers","HttpProvider","process","txBuilder","TxBuilderV2","Network","kovan","lendingPool","getLendingPool","Market","Proto","a","createUser","tx","wait","txwait","queryFilter","filters","CreateUser","filterValues","createUserStatus","ethers","utils","defaultAbiCoder","decode","data","getAllStablecoinDeposits","events","AllDeposits","depositValues","depositMap","div","BigNumber","from","pow","toString","shouldForce","ratio","swapToTokenAddress","amountToSwap","userAddress","objectPassIn","user","flash","fromAsset","fromAToken","toAsset","fromAmount","toAmount","maxSlippage","permitSignature","swapAll","onBehalfOf","referralCode","useEthPath","swapCollateral","swapCollateralResponse","decoder","swapStablecoinDeposit","SwapStablecoinDeposit","latest","swapStablecoinDepositEvent","userTUSDDepositAmount","userTUSDDepositDecimals","swappable","Math","round","toNumber","swapCollateralForUser","swapResponse","optInToggle","OptInToggle","toggleValue","useStyles","makeStyles","table","minWidth","BlockchainMessagesTable","classes","blockchainMessages","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","TableBody","scope","random","HARDHAT_NETWORK_ID","App","initialState","selectedAddress","transactionError","optInStatus","state","Web3Provider","window","ethereum","networkVersion","Contract","mockContractAddress","MockStableRatioSwap","MockStableRatioSwapArtifact","abi","getSigner","contractAddress","StableRatioSwap","StableRatioSwapArtifact","setState","intializeEthers","enable","checkNetwork","initialize","on","newAddress","resetState","newDeposits","constructor","prevState","newOptInStatus","swapStablecoinDepositSummary","swapStatus","assetReserveRatio","swapToTokenName","swapName","sudoUpdateDepositState","depositsCopy","JSON","parse","stringify","String","parseInt","dismissNetworkError","optInStatusLabel","position","left","top","transform","Grid","container","direction","justify","alignItems","updateCreateUser","updateDepositState","updateSwapStablecoinDeposit","updateOptInToggle","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.db8c068a.chunk.js","sourcesContent":["import React from \"react\";\n\nexport function NoWalletDetected() {\n  return (\n    <div className=\"container\">\n      <div className=\"row justify-content-md-center\">\n        <div className=\"col-6 p-4 text-center\">\n          <p>\n            No Ethereum wallet was detected. <br />\n            Please install{\" \"}\n            <a\n              href=\"http://metamask.io\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              MetaMask\n            </a>\n            .\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n","/* eslint-disable react/prop-types */\nimport React from \"react\";\n\nexport function NetworkErrorMessage({ message, dismiss }) {\n  return (\n    <div className=\"alert alert-danger\" role=\"alert\">\n      {message}\n      <button\n        type=\"button\"\n        className=\"close\"\n        data-dismiss=\"alert\"\n        aria-label=\"Close\"\n        onClick={dismiss}\n      >\n        <span aria-hidden=\"true\">&times;</span>\n      </button>\n    </div>\n  );\n}\n","/* eslint-disable react/prop-types */\nimport React from \"react\";\n\nimport { NetworkErrorMessage } from \"./NetworkErrorMessage\";\n\nexport function ConnectWallet({ connectWallet, networkError, dismiss }) {\n  return (\n    <div className=\"container\">\n      <div className=\"row justify-content-md-center\">\n        <div className=\"col-12 text-center\">\n          {networkError && (\n            <NetworkErrorMessage \n              message={networkError} \n              dismiss={dismiss} \n            />\n          )}\n        </div>\n        <div className=\"col-6 p-4 text-center\">\n          <p>Please connect to your wallet.</p>\n          <button\n            className=\"btn btn-warning\"\n            type=\"button\"\n            onClick={connectWallet}\n          >\n            Connect Wallet\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport PropTypes from 'prop-types';\nimport Box from '@material-ui/core/Box';\n\nconst GenericButton = (props) => {\n  return (\n    <Box display=\"flex\" justifyContent=\"space-between\" m={1}>\n      <Button variant=\"contained\" color=\"primary\" size=\"medium\" onClick={props.onClick}>\n        {props.label}\n      </Button>\n    </Box>\n  );\n}\n\nGenericButton.propTypes = {\n  onClick: PropTypes.func,\n  label: PropTypes.string\n}\n\nexport default GenericButton;\n","import * as React from 'react';\nimport { DataGrid } from '@material-ui/data-grid';\nimport PropTypes from 'prop-types';\n\nconst columns = [\n  { field: 'coin', headerName: 'Coin', width: 100 },\n  { field: 'depositAmount', headerName: 'Deposit Amount ($)', width: 250 },\n];\n\nconst ERR_MSG = \"No stablecoin deposits on Aave yet!\";\n\nconst convertRawToGridData = (rawData) => {\n  let gridData = []\n  Object.keys(rawData).map((key, i) => {\n    gridData.push({id: i, coin: key, depositAmount: rawData[key]})\n  })\n  console.log(\"gridData\",gridData);\n  return gridData;\n}\n\nexport default function DepositsGrid(props) {\n  if (props.deposits !== undefined) {\n    let transformedData = convertRawToGridData(props.deposits);\n    console.log(\"props.deposits transformedData\",transformedData);\n    return (\n      transformedData.length > 0 ?\n        (\n          <div style={{ autoHeight: true, width: '40%' }}>\n            <DataGrid rows={transformedData} columns={columns} autoHeight={true} autoPageSize={true} />\n          </div>\n        )\n      : <div>{ERR_MSG}</div>\n    );\n  }\n  return <div>{ERR_MSG}</div>;\n}\n\nDepositsGrid.propTypes = {\n  deposits: PropTypes.array,\n}\n\n","require('dotenv').config()\nimport { ethers } from 'ethers';\nimport { TxBuilderV2, Network, Market } from '@aave/protocol-js';\nimport Web3 from 'web3';\nclass Utils {\n\n  constructor(stableRatioSwap, provider, address) {\n    this.stableRatioSwap = stableRatioSwap;\n    this.provider = provider;\n    this.address = address;\n    this.httpProvider = new Web3.providers.HttpProvider(`https://kovan.infura.io/v3/${process.env.REACT_APP_KOVAN_INFURA_KEY}`);\n    console.log('httpProvider',this.httpProvider);\n    this.txBuilder = new TxBuilderV2(Network.kovan, this.httpProvider);\n    console.log('txBuilder',this.txBuilder);\n    this.lendingPool = this.txBuilder.getLendingPool(Market.Proto); // get all lending pool methods\n    console.log('lendingPool',this.lendingPool);\n  }\n  \n  async createUser() {\n    try {\n      let tx = await this.stableRatioSwap.createUser();\n      let txwait = await tx.wait();\n      console.log('createUser response!', txwait);   \n\n      let filterValues = await this.stableRatioSwap.queryFilter(this.stableRatioSwap.filters.CreateUser());\n      let createUserStatus = (filterValues === undefined || filterValues.length == 0) ? false :\n        ethers.utils.defaultAbiCoder.decode(['bool'], filterValues[filterValues.length - 1].data);\n      console.log('createUserStatus from chain',createUserStatus);\n      return createUserStatus;   \n    } catch(e) {\n      console.log('createUser exception', e);\n      return 'Error';\n    }\n  }\n\n  // async deposit() {\n  //   try {\n  //     let tx = await this.stableRatioSwap.deposit(DEPOSIT_AMOUNT,'TUSD',this.address);\n  //     let txwait = await tx.wait();\n  //     console.log('deposit response!',txwait);\n  //     let filterValues = await this.stableRatioSwap.queryFilter(this.stableRatioSwap.filters.Deposit());\n  //     let depositStatus = (filterValues === undefined || filterValues.length == 0) ? false :\n  //       ethers.utils.defaultAbiCoder.decode(['bool'], filterValues[filterValues.length - 1].data);\n  //     console.log('depositStatus from chain',depositStatus);\n  //     return depositStatus;      \n  //   } catch(e) {\n  //     console.log('deposit exception', e);\n  //     return 'Error';\n  //   }\n  // }\n\n  async getAllStablecoinDeposits() {\n    try {\n      let tx = await this.stableRatioSwap.getAllStablecoinDeposits();\n      let txwait = await tx.wait();\n      console.log('getAllStablecoinDeposits response!',txwait); \n      console.log('getAllStablecoinDeposits events',txwait.events);  \n      let filterValues = await this.stableRatioSwap.queryFilter(this.stableRatioSwap.filters.AllDeposits());\n      console.log('filterValues',filterValues);\n      let depositValues = ethers.utils.defaultAbiCoder.decode(\n        ['uint', 'uint', 'uint', 'uint','uint','uint', 'uint', 'uint', 'uint','uint'],\n        filterValues[filterValues.length - 1].data);\n      console.log('depositValues',depositValues);\n      let depositMap = {};\n\n      depositMap['TUSD'] = depositValues[0].div(ethers.BigNumber.from('10').pow(depositValues[1])).toString();\n      depositMap['USDC'] = depositValues[2].div(ethers.BigNumber.from('10').pow(depositValues[3])).toString();\n      depositMap['USDT'] = depositValues[4].div(ethers.BigNumber.from('10').pow(depositValues[5])).toString();\n      depositMap['DAI'] = depositValues[6].div(ethers.BigNumber.from('10').pow(depositValues[7])).toString();\n      depositMap['BUSD'] = depositValues[8].div(ethers.BigNumber.from('10').pow(depositValues[9])).toString();\n\n      console.log('depositMap',depositMap);\n      return depositMap;   \n    } catch(e) {\n      console.log('getAllStablecoinDeposits exception', e);\n      return {};\n    }\n  }\n\n  async swapCollateralForUser(shouldForce,ratio,swapToTokenAddress,amountToSwap) {\n    console.log('swapCollateralForUser params',shouldForce,ratio,swapToTokenAddress,amountToSwap);\n    if (ratio > 1 || shouldForce) {\n      let userAddress =  this.address;\n      let swapAllValue = true;\n      let flashValue = true;\n      let fromAssetValue = '0x016750AC630F711882812f24Dba6c95b9D35856d'; //TUSD Kovan\n      let fromATokenValue = '0x39914AdBe5fDbC2b9ADeedE8Bcd444b20B039204'; //TUSD atoken address\n      let toAssetValue = swapToTokenAddress;\n      let fromAmountValue = amountToSwap;\n      let toAmountValue = amountToSwap;\n      let maxSlippageValue = 5;\n      let permitSignatureValue = undefined;\n      let onBehalfOfValue = userAddress;\n      let referralCodeValue = undefined;\n      let useEthPathValue = undefined;\n\n      let objectPassIn = {\n        user:userAddress, // string;\n        flash:flashValue, // ? boolean;\n        fromAsset:fromAssetValue, // string;\n        fromAToken:fromATokenValue, // string;\n        toAsset:toAssetValue, // string;\n        fromAmount:fromAmountValue, // string;\n        toAmount:toAmountValue, // string;\n        maxSlippage:maxSlippageValue, // string;\n        permitSignature:permitSignatureValue, // ? PermitSignature;\n        swapAll:swapAllValue, // boolean;\n        onBehalfOf:onBehalfOfValue, // ? string;\n        referralCode:referralCodeValue, // ? string;\n        useEthPath:useEthPathValue, // ? boolean;\n      };\n      console.log('swapCollateral objectPassIn',objectPassIn);\n      try {\n        let swapCollateralResponse = await this.lendingPool.swapCollateral(objectPassIn);\n        console.log('swapCollateralResponse success scenario',swapCollateralResponse);\n        return true;\n      } catch (e) {\n        console.log('swapCollateralResponse EXCEPTION',e);\n        return false;\n      }\n    } else {\n      return false;\n    }\n  }\n\n  async swapStablecoinDeposit(shouldForce) {\n    try {\n      let decoder = ['bool', 'uint', 'uint', 'uint', 'address', 'string'];\n      console.log('swapStablecoinDeposit shouldForce:',shouldForce);\n      let tx = await this.stableRatioSwap.swapStablecoinDeposit(shouldForce);\n      let txwait = await tx.wait();\n      console.log('swapStablecoinDeposit response!',txwait); \n      console.log('swapStablecoinDeposit response! events',txwait.events); \n      let filterValues = await this.stableRatioSwap.queryFilter(this.stableRatioSwap.filters.SwapStablecoinDeposit());\n      console.log('filterValues',filterValues);\n      console.log('print ALL events decoded');\n      for (var i=0; i < filterValues.length; i++) {\n        console.log(`event ${i}`,ethers.utils.defaultAbiCoder.decode(decoder, filterValues[i].data));\n      }\n      let latest = filterValues[filterValues.length - 1].data;\n      console.log('latest event raw',latest);\n      let swapStablecoinDepositEvent = ethers.utils.defaultAbiCoder.decode(decoder, latest);\n      let swapToTokenAddress = swapStablecoinDepositEvent[4];\n      let userTUSDDepositAmount = swapStablecoinDepositEvent[2];\n      let userTUSDDepositDecimals = swapStablecoinDepositEvent[3];\n      console.log('latest swapStablecoinDepositEvent',swapStablecoinDepositEvent);\n      let ratio = swapStablecoinDepositEvent[1]/10**4;\n      let swappable = swapStablecoinDepositEvent[0];\n      let amountToSwap = Math.round(userTUSDDepositAmount.div(ethers.BigNumber.from('10').pow(userTUSDDepositDecimals)).toNumber());\n      console.log('swapCollateralForUser params',shouldForce,swappable,ratio,swapToTokenAddress,userTUSDDepositAmount,userTUSDDepositDecimals);\n      let swapResponse = await this.swapCollateralForUser(shouldForce,ratio,swapToTokenAddress,amountToSwap);\n      console.log('swapCollateralForUser response',swapResponse);\n      return {'status': swapResponse, 'ratio': ratio, 'swapToTokenName': swapStablecoinDepositEvent[5], 'amountToSwap':amountToSwap};     \n    } catch(e) {\n        console.log('swapStablecoinDeposit exception', e);\n        return {'status': 'Error', 'ratio': 'Error',};  \n    }\n  }\n\n  async optInToggle() {\n    try {\n      let tx = await this.stableRatioSwap.optInToggle();\n      let txwait = await tx.wait();\n      console.log('optInToggle response!',txwait);      \n      \n      let filterValues = await this.stableRatioSwap.queryFilter(this.stableRatioSwap.filters.OptInToggle());\n      console.log('filterValues',filterValues);\n      console.log('filterValues.events',filterValues.events);\n      let toggleValue = ethers.utils.defaultAbiCoder.decode(\n        ['bool'],\n        filterValues[filterValues.length - 1].data);\n      console.log('toggleValue',toggleValue);\n      return toggleValue;\n    } catch(e) {\n      console.log('optInToggle exception', e);\n      return 'Error';\n    }\n  }\n}\n\nexport default Utils;","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport PropTypes from 'prop-types';\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 200,\n  },\n});\n\nexport default function BlockchainMessagesTable(props) {\n  const classes = useStyles();\n\n  if (props.blockchainMessages !== undefined && props.blockchainMessages.length > 0){\n    return (\n      <TableContainer component={Paper}>\n        <Table className={classes.table} aria-label=\"simple table\">\n          <TableHead>\n            <TableRow>\n              <TableCell>Blockchain Logs</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {props.blockchainMessages.map((message) => (\n              <TableRow key={message+Math.random()}>\n                <TableCell component=\"th\" scope=\"row\">{message}</TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    );\n  }\n  return (<div></div>);\n}\n\nBlockchainMessagesTable.propTypes = {\n  blockchainMessages: PropTypes.array\n}\n","import React from 'react';\n\nimport { ethers } from 'ethers';\n\nimport StableRatioSwapArtifact from \"../contracts/StableRatioSwap.json\";\nimport contractAddress from \"../contracts/contract-address.json\";\n\nimport MockStableRatioSwapArtifact from \"../contracts/MockStableRatioSwap.json\";\nimport mockContractAddress from \"../contracts/mock-contract-address.json\";\n\nimport { NoWalletDetected } from './NoWalletDetected';\nimport { ConnectWallet } from './ConnectWallet';\n\nimport Grid from '@material-ui/core/Grid';\n\nimport GenericButton from './GenericButton';\nimport DepositsGrid from './DepositsGrid';\nimport Utils from '../Utils';\nimport BlockchainMessagesTable from './BlockchainMessagesTable';\n\n// list of network ids https://docs.metamask.io/guide/ethereum-provider.html#properties\nconst HARDHAT_NETWORK_ID = '31337';\nconst MAINNET_ID = '1';\nconst KOVAN_ID = '42';\nconst NETWORK_ERR_MSG = 'Please connect Metamask to Localhost:8545, mainnet, or Kovan';\n// const DEPOSIT_AMOUNT = 100;//ethers.utils.parseEther('0.1');\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.initialState = {\n      selectedAddress: undefined,\n      transactionError: undefined,\n      networkError: undefined,\n      utils: undefined,\n      deposits: {\n        'TUSD': 0,\n        'USDC': 0,\n        'USDT': 0,\n        'DAI': 0,\n        'BUSD': 0\n      },\n      optInStatus: false,\n      blockchainMessages: []\n    };\n\n    this.state = this.initialState;\n  }\n\n  async intializeEthers() {\n    // We first initialize ethers by creating a provider using window.ethereum\n    this.provider = new ethers.providers.Web3Provider(window.ethereum);\n\n    if (window.ethereum.networkVersion === HARDHAT_NETWORK_ID) {\n      this.stableRatioSwap = new ethers.Contract(\n        mockContractAddress.MockStableRatioSwap,\n        MockStableRatioSwapArtifact.abi,\n        this.provider.getSigner(0)\n      );\n    }\n    else if (window.ethereum.networkVersion === KOVAN_ID) {\n      this.stableRatioSwap = new ethers.Contract(\n        contractAddress.StableRatioSwap,\n        StableRatioSwapArtifact.abi,\n        this.provider.getSigner(0)\n      );\n      console.log(\"StableRatioSwap Kovan address\",contractAddress);\n    }\n    console.log(\"networkVersion\",window.ethereum.networkVersion);\n    this.setState({utils: new Utils(this.stableRatioSwap, this.provider, this.state.selectedAddress)});\n  }\n\n  dismissNetworkError() {\n    this.setState({ networkError: undefined });\n  }\n\n  async initialize(userAddress) {\n    // This method initializes the dapp\n\n    // We first store the user's address in the component's state\n    this.setState({\n      selectedAddress: userAddress\n    });\n\n    // Then, we initialize ethers\n    await this.intializeEthers();\n  }\n\n  async connectWallet() {\n    //connects dapp to wallet when user clicks on connect wallet button\n\n    const [selectedAddress] = await window.ethereum.enable();\n    console.log('selectedAddress',selectedAddress);\n    // Once we have the address, we can initialize the application.\n\n    if (!this.checkNetwork()) {\n      return;\n    }\n\n    this.initialize(selectedAddress);\n\n    // We reinitialize it whenever the user changes their account.\n    window.ethereum.on('accountsChanged', ([newAddress]) => {\n      // `accountsChanged` event can be triggered with an undefined newAddress.\n      // This happens when the user removes the Dapp from the \"Connected\n      // list of sites allowed access to your addresses\" (Metamask > Settings > Connections)\n      // To avoid errors, we reset the dapp state\n      if (newAddress === undefined) {\n        return this.resetState();\n      }\n\n      this.initialize(newAddress);\n    });\n\n    // We reset the dapp state if the network is changed\n    window.ethereum.on('networkChanged', () => {\n      this.resetState();\n    });\n  }\n\n  // This method resets the state\n  resetState() {\n    this.setState(this.initialState);\n  }\n\n  // This method checks if Metamask selected network is Localhost:8545, mainnet, or Kovan\n  checkNetwork() {\n    if (window.ethereum.networkVersion === HARDHAT_NETWORK_ID || window.ethereum.networkVersion === MAINNET_ID || window.ethereum.networkVersion === KOVAN_ID) {\n      return true;\n    }\n\n    this.setState({\n      networkError: NETWORK_ERR_MSG,\n    });\n\n    return false;\n  }\n\n  async updateDepositState() {\n    let newDeposits = await this.state.utils.getAllStablecoinDeposits();\n    if (newDeposits && Object.keys(newDeposits).length === 0 && newDeposits.constructor === Object) {\n      this.setState(prevState => ({\n        blockchainMessages: [...prevState.blockchainMessages, `Failed to fetch latest deposit data`]\n      }));\n    } else {\n      this.setState({deposits: newDeposits}, () => {\n        console.log(\"deposits updateDepositState\",this.state.deposits)\n        this.setState(prevState => ({\n          blockchainMessages: [...prevState.blockchainMessages, `Successfully fetched latest deposit data`]\n        }));\n      });\n    }\n  }\n\n  async updateOptInToggle() {\n    let newOptInStatus = await this.state.utils.optInToggle();\n    this.setState({optInStatus: newOptInStatus}, () => {\n      console.log(\"optInToggle updateOptInToggle\",this.state.optInStatus);\n      this.setState(prevState => ({\n        blockchainMessages: [...prevState.blockchainMessages, `User opt-in status for auto-swapping assets: ${this.state.optInStatus}`]\n      }))\n    });\n  }\n\n  async updateCreateUser() {\n    let createUserStatus = await this.state.utils.createUser();\n    console.log(\"createUser updateOptInToggle\",this.state.createUserStatus);\n    this.setState(prevState => ({\n      blockchainMessages: [...prevState.blockchainMessages, `User added to app status: ${createUserStatus}`]\n    }));\n  }\n\n  async updateSwapStablecoinDeposit(shouldForce) {\n    let swapStablecoinDepositSummary = await this.state.utils.swapStablecoinDeposit(shouldForce);\n    let swapStatus = swapStablecoinDepositSummary[\"status\"];\n    let assetReserveRatio = swapStablecoinDepositSummary[\"ratio\"];\n    let swapToTokenName = swapStablecoinDepositSummary[\"swapToTokenName\"];\n    let amountToSwap = swapStablecoinDepositSummary[\"amountToSwap\"];\n    swapStatus = swapStatus === undefined ? \"Error\" : swapStatus;\n    let swapName =  shouldForce ? \"Force Swap\" : \"Swap\";\n    this.setState(prevState => ({\n      blockchainMessages: [...prevState.blockchainMessages, `${swapName} TUSD deposit status: ${swapStatus}, TUSD asset/reserve ratio: ${assetReserveRatio}`]\n    }), () => {\n      console.log(\"now sudoUpdateDepositState\");\n      this.sudoUpdateDepositState(swapToTokenName, amountToSwap);\n    });\n  }\n\n  sudoUpdateDepositState(swapToTokenName, amountToSwap) {\n    let depositsCopy = JSON.parse(JSON.stringify(this.state.deposits));\n    console.log(\"depositsCopy\",depositsCopy);\n    depositsCopy['TUSD']=0;\n    depositsCopy[swapToTokenName]=String(parseInt(depositsCopy[swapToTokenName])+parseInt(amountToSwap));\n    console.log(\"depositsCopy updated\",depositsCopy);\n    this.setState({\n      deposits: depositsCopy\n    });\n  }\n\n  // async updateDeposit() {\n  //   let depositStatus = await this.state.utils.deposit();\n  //   this.setState(prevState => ({\n  //     blockchainMessages: [...prevState.blockchainMessages, `Send TUSD deposit status: ${depositStatus}`]\n  //   }));\n  // }\n\n  render() {\n    // Ethereum wallets inject the window.ethereum object. If it hasn't been\n    // injected, we instruct the user to install MetaMask.\n    if (window.ethereum === undefined) {\n      return <NoWalletDetected />;\n    }\n\n    if (!this.state.selectedAddress) {\n      return (\n        <ConnectWallet\n          connectWallet={() => this.connectWallet()}\n          networkError={this.state.networkError}\n          dismiss={() => this.dismissNetworkError()}\n        />\n      );\n    }\n\n    let optInStatusLabel = this.state.optInStatus ? 'Out of' : 'In to';\n\n    return (\n      <div\n        style={{\n            position: 'absolute', left: '50%', top: '50%',\n            transform: 'translate(-50%, -50%)',\n            display: 'inline-block'\n        }}\n      >\n      <Grid\n        container\n        direction=\"row\"\n        justify=\"center\"\n        alignItems=\"center\"\n      >\n        <GenericButton onClick={() => this.updateCreateUser()} label=\"Register Account\" />\n        {/* <GenericButton onClick={() => this.updateDeposit()} label={`Deposit ${DEPOSIT_AMOUNT} TUSD`} /> */}\n        <GenericButton onClick={() => this.updateDepositState()} label=\"Refresh Deposits\" />\n        <GenericButton onClick={() => this.updateSwapStablecoinDeposit(false)} label=\"Swap TUSD\" />\n        <GenericButton onClick={() => this.updateSwapStablecoinDeposit(true)} label=\"Force Swap TUSD\" />\n        <GenericButton onClick={() => this.updateOptInToggle()} label={`Opt ${optInStatusLabel} automatic swapping`} />\n      </Grid>\n      <Grid\n        container\n        direction=\"row\"\n        justify=\"center\"\n        alignItems=\"center\"\n      >\n        <DepositsGrid deposits={this.state.deposits} /> \n      </Grid>\n      <Grid\n        container\n        direction=\"row\"\n        justify=\"center\"\n        alignItems=\"center\"\n      >\n        <BlockchainMessagesTable blockchainMessages={this.state.blockchainMessages} /> \n      </Grid>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}